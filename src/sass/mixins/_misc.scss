// Print format
@mixin print {
  @media print {
    @content;
  }
}

// Fallback for I8+
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity = $opacity-ie); //IE8
}

// Vendor prefixing
@mixin prefix($property, $value, $vendors: webkit moz ms o, $default: true) {
  @if $vendors {
    @each $vendor in $vendors {
      #{"-" + $vendor + "-" + $property}: #{$value};
    }
  }
  @if $default {
    #{$property}: #{$value};
  }
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Background gradient
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == 'vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

// Define vertical, horizontal, or both position
@mixin center($position) {
  position: absolute;

  @if $position == 'vertical' {
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
  }
  @else if $position == 'horizontal' {
    left: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translate(-50%);
  }
  @else if $position == 'both' {
    top: 50%;
    left: 50%;
    -webkit-transform: translate(-50%, -50%);
    -ms-transform: translate(-50%, -50%);
    transform: translate(-50%, -50%);
  }
}

@function font-src($path, $name, $fsel) {
    $formats: (
        eot: (
            format: 'embedded-opentype',
            folder: '/eot/',
            extension: '.eot?#iefix'
        ),
        otf: (
            format: 'opentype',
            folder: '/otf/',
            extension: '.otf'
        ),
        woff2: (
            format: 'woff2',
            folder: '/woff2/',
            extension: '.woff2'
        ),
        woff: (
            format: 'woff',
            folder: '/woff/',
            extension: '.woff'
        ),
        ttf: (
            format: 'truetype',
            folder: '/ttf/',
            extension: '.ttf'
        ),
        svg: (
            format: 'svg',
            folder: '/svg/',
            extension: '.svg'
        ),
    );
     
    $urls: ();

    @each $value in $fsel {
        $format: map-deep-get($formats, $value, format); 
        $extension: map-deep-get($formats, $value, extension); 
        $folder: map-deep-get($formats, $value, folder); 
        $vpath: $path + $folder + $name + $extension;
        $vurl:'url("'+ $vpath + '") format("' + $format +'")';
        $urls: append($urls, unquote($vurl), comma);
    }
     
    @return $urls;
}

// Usage: @include font-face('gotham', '/fonts/gotham');
@mixin font-face($font-name, $file-name, $file-path, $formats:(eot,ttf), $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-path + '/eot/' + $file-name + '.eot');
    src: #{font-src($file-path, $file-name, $formats)};
    font-weight: $weight;
    font-style: $style;
  }
}

@mixin set-component($placeholder) {
  %#{$placeholder} {
      @content;
  }
}

@mixin get-component($placeholder) {
  @extend %#{$placeholder};
}
