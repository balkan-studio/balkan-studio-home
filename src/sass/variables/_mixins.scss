@mixin theme-style ($theme) {
    @each $class, $element in $theme {

        $components: map-get($element, components);
        $children: map-get($element, children);

        #{unquote($class)} {
            @each $property, $value in $element {
                @if $property != 'components' and $property != 'children' {
                    @if type-of($value) != 'map' {
                        #{$property}: $value;
                    }
                    @else if type-of($value) == 'map' {
                        @include theme-style(($property: $value));
                    }
                }
            }

            @if ($components) {
                @each $component in $components {
                    @include get-component($component);
                }
            }


            @if type-of($children) == 'map' {
                @include theme-style($children);
            }
        }
    }
}

@mixin font-size($size) {
    @if type-of($size) == 'number' {
        font-size: #{abs(( $size / $root-font-size ) * 1em)};
    }
    @else {
        @each $name, $map in $font-sizes {
            @if $size == $name {
                font-size: #{abs(( map-get($map, size) / $root-font-size ) * 1em)
};
            }
        }
    }
}

@mixin rfont-size($size) {
    @if type-of($size) == 'number' {
        font-size: #{$size * 10px};
        font-size: #{$size * 1rem};
    }
    @else {
        @each $name, $map in $font-sizes {
            @if $size == $name {
                font-size: #{map-get($map, size) * 10px};
                font-size: #{map-get($map, size) * 1rem};
            }
        }
    }
}

@function get-size($size) {
    $size-em: 0;

    @if type-of($size) == 'number' {
        $size-em: abs(( $size / $root-font-size ) * 1em);
    }
    @else {
        @each $name, $map in $font-sizes {
            @if $size == $name {
                $size-em: abs(( map-get($map, size) / $root-font-size) * 1em);
            }
        }
    }
    
    @return $size-em;
}

@function rget-size($size) {
    $size-px: 0px;
    $size-rem: 0rem;

    @if type-of($size) == 'number' {
        $size-px: $size * 10px;
        $size-rem: $size * 1rem;
    }
    @else {
        @each $name, $map in $font-sizes {
            @if $size == $name {
                $size-px: map-get($map, size) * 10px;
                $size-rem: map-get($map, size) * 1rem;
            }
        }
    }
    
    @return $size-px $size-rem;
}

@mixin padding($size, $positions:(t,r,b,l), $m: 1) {
    $size_len: length($size);
    $pos_len:  length($positions);
    
    @if $size_len == 1 {
        $vsize: get-size($size);
        $sem: $vsize * $m; 

        @if $pos_len == 4 {
            padding: $sem $sem $sem $sem; 
        }
        @else if $pos_len {
            @each $v in $positions { @if $v == t {
                   padding-top: $sem;
               }
               @else if $v == r {
                   padding-right: $sem;
               }
               @else if $v == b {
                   padding-bottom: $sem;
               }
               @else if $v == l {
                   padding-left: $sem;
               }
            } 
        }
    }
    @else {
        $sem: $size;
        @for $i from 1 to $size_len+1 {
            $vsize: get-size(nth($size, $i));
            $vem: $vsize * $m;
            $sem: set-nth($sem, $i, $vem);
        }
        padding: $sem; 
    }
}	

@mixin rpadding($size, $positions:(t,r,b,l), $m: 1) {
    $size_len: length($size);
    $pos_len:  length($positions);
    
    @if $size_len == 1 {
        $sizes: rget-size($size);
        $spx: nth($sizes, 1) * $m;
        $srem: nth($sizes, 2) * $m; 

        @if $pos_len == 4 {
            padding: $spx $spx $spx $spx;
            padding: $srem $srem $srem $srem; 
        }
        @else if $pos_len {
            @each $v in $positions { @if $v == t {
                   padding-top: $spx;
                   padding-top: $srem;
               }
               @else if $v == r {
                   padding-right: $spx;
                   padding-right: $srem;
               }
               @else if $v == b {
                   padding-bottom: $spx;
                   padding-bottom: $srem;
               }
               @else if $v == l {
                   padding-left: $spx;
                   padding-left: $srem;
               }
            } 
        }
    }
    @else {
        $spx: $size;
        $srem: $size;
        @for $i from 1 to $size_len+1 {
            $vals: rget-size(nth($size, $i));
            $vpx: nth($vals, 1) * $m;
            $vrem: nth($vals, 2) * $m;
            $spx: set-nth($spx, $i, $vpx);
            $srem: set-nth($srem, $i, $vrem);
        }
        padding: $spx;
        padding: $srem; 
    }
}	

@mixin rmargin($size, $positions:(t,r,b,l), $m: 1) {
    $size_len: length($size);
    $pos_len:  length($positions);
    
    @if $size_len == 1 {
        $sizes: rget-size($size);
        $spx: nth($sizes, 1) * $m;
        $srem: nth($sizes, 2) * $m; 

        @if $pos_len == 4 {
            margin: $spx $spx $spx $spx;
            margin: $srem $srem $srem $srem; 
        }
        @else if $pos_len {
            @each $v in $positions { @if $v == t {
                   margin-top: $spx;
                   margin-top: $srem;
               }
               @else if $v == r {
                   margin-right: $spx;
                   margin-right: $srem;
               }
               @else if $v == b {
                   margin-bottom: $spx;
                   margin-bottom: $srem;
               }
               @else if $v == l {
                   margin-left: $spx;
                   margin-left: $srem;
               }
            
            } 
        }
    }
    @else {
        $spx: $size;
        $srem: $size;
        @for $i from 1 to $size_len+1 {
            $vals: rget-size(nth($size, $i));
            $vpx: nth($vals, 1) * $m;
            $vrem: nth($vals, 2) * $m;
            $spx: set-nth($spx, $i, $vpx);
            $srem: set-nth($srem, $i, $vrem);
        }
        margin: $spx;
        margin: $srem; 
    }
}

@mixin margin($size, $positions:(t,r,b,l), $m: 1) {
    $size_len: length($size);
    $pos_len:  length($positions);
    
    @if $size_len == 1 {
        $vsize: get-size($size);
        $sem: $vsize * $m; 

        @if $pos_len == 4 {
            margin: $sem $sem $sem $sem; 
        }
        @else if $pos_len {
            @each $v in $positions { @if $v == t {
                   margin-top: $sem;
               }
               @else if $v == r {
                   margin-right: $sem;
               }
               @else if $v == b {
                   margin-bottom: $sem;
               }
               @else if $v == l {
                   margin-left: $sem;
               }
            
            } 
        }
    }
    @else {
        $sem: $size;
        @for $i from 1 to $size_len+1 {
            $vsize: get-size(nth($size, $i));
            $vem: $vsize * $m;
            $sem: set-nth($sem, $i, $vem);
        }
        margin: $sem; 
    }
}

@mixin line-height($height) {
    @each $name, $value in $line-height {
        @if $height == $name {
            line-height: $value;
        }
    }
}

@mixin selection($prop, $bg, $fg) {
    @include set-component(#{$prop}-selection) {
        &::-moz-selection,
        &::selection {
            background-color: $bg;
            color: $fg;
        }
        @content;
    }
}

